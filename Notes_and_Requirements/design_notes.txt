1) MainWindow should not be clickable when load screen is displayed.
2) Some constituency should be selected by default. 
3) It would be nice t have models notified (probably via signals&slots) when their 
underlying data is updated. At the moment, after asynchronously refreshing data with 
a python script, the code that runs the script also tells the models to refresh.
4) NEED to rethink data updates. high-level GUI objects should not be calling the lowest-level 
code here - namely the pytho script that updates the data underlying the models. Perhaps the models' 
existing refresh methods or new methods should tell their data-access objects to refresh the underlying data.
It's starting to feel like each model should have its own data-update script but this would be difficult
to implement; however if I do not implement this, I run the risk of ending up repeatedly updating
the data when I really need to do this only once.  
5) SqlPollResultDatabaseManager is currently not reading datetimes correctly - the datetimes that
SqlPollResultDatabaseManager::pollResultsForConstituency() reads from the database all convert to 
empty strings.
6) As of 7115 23/Feb/2020, there seems to be a race condition that makes the load screen display 
forever. This does not seems to be a script-running problem because the sript does seem to run and the 
does seem to get updated - it's just that the load screen never gets deleted. This only happens
sometimes. 
7) In commit 42ee9562ae37b77abc3337e95ec79678f8fe01a4 (and possibly still), on line 211 of 
ConstituencyExplorerWidget.cpp, the call to QWidget::setWindowModality() doesn't seem to work.
8) At the moment, the three "scraping" scripts (they don't yet scrape at all - that will have to come later; now they 
   just populate tables in a database) seem to be doing something weird where they will all obliterate the database before doing their
   work. This is why tables seem to disappear.
9) It is tempting to think that model methods that necessitate the emission of signals signals should emit those
   signals themselves, since no calling function would not want to emit those signals. BUT THIS IS NOT TRUE!!! 
   This can depend on context e.g. whether ConstituencyModel::reloadConstituencyCache() is called by 
   ConstituencyModel::refreshDataSource() or by ConstituencyModel::reLoad() (in their form in commit 230821ac6d8fba9323b3a2528b912384bfca47ba). 
   Moreover, not calling these signals inside the mothods also means that the methods just t=do what their name suggests 
   (again ConstituencyModel::reloadConstituencyCache() is a good example of this.).
10) ConstituencyWidget should probably create its own proxy model rather than having one passed to it by 
    ConstituecyExplorerWidget. This will probably mean it will need to keep a handle to the PoliticianModel.
11) When the ConstituencyModel which is the source of ConstituencyWidget's ProxyModel emits modelReset, it will trigger ConstituencyWidget::loadSceneConstituencies()
    before it will trigger PixmapCreatingProxyModel::reloadCache(), so that loadSceneConstituencies() does not have access to the latest Pixmaps from 
    PixmapCreatingProxyModel. This is partially fixed by having PixmapCreatingProxyModel::reloadCache() emit modelReset(); having done this, there are now black pixmaps 
    on startup but why not filled pixmaps? I won't commit this because it seems wrong but it's good to have a note of it. Point 10 may be a solution.
12) If you have a proxy model, then you should interact with its signals and slots, not its source's signals and slots. (This is very vague but 
    it feels right and also stops you reactingto a change in the sourcemodel before that change has had a chance to filter down to the proxymodel.)

At the moment, the main work of ConstituencyDrillDownWidget is in having buttons
manipulate the electoral status of a PoliticianModel. We should have a widget 
dedicated to this. It should be called something like PoliticianModelStatusSelectorWidget.

I need a naming convention about refreshing and loading. There should
be a consistent and clear distinction between functions called load... reload..., and refresh...

Possible problem: it is possible that models will load their caches from the database while the database
is in the process of being uodated. Mutex(es) required?

It seems to work well to have form widgets keep pointers to non-gui components in general 
(like models and selection models); you can access the gui components through the ui_ member.

I need to think about what loadCache methods - in particular, 
do these call QAbstractItenModel::resetModel() or do their callers 
do this? I feel like their callers should do this. It should be public functions that 
call model QAbstractItenModel::resetModel() and QAbstractItenModel::dataChanged() methods 
etc. 

Do I need two politician tables? One for elected and one for candidates? Or do I just need 
two bool columns called elected and candidate. Probably the latter - that's what I've gone with.

The python script should scrape the web and created the initial database, whose path 
will be, say, blablabla.db. The main function should initialise make the database connection
at some point, with a line like 
    QSqlDatabase::addDatabase("SQLITE", "blablabla.db");
Then, hopefully, whenever a SqlDatabaseManagerFactory is default constructed, the default constrctor's
call to QSqlDatabase::database() (with no arguments) will return a QSqlDatabase that's connected to 
blablabla.db.

Maybe no class should be composed of a QSqlDatabase or an owning pointer to such (see the warning in 
the documentation of QSqlDatabase). Perhaps the database managers' methods should just call 
QSqlDatabase::database() whenever they want to access the database. Not sure. 

I'll need a rectangle layout calculator (to be created on the stack in whatever
method of ConstituencyWidget is responsible for defining the locations of the constituencies). 
I'll also need a rectangle navigator (to be kept by the ConstituencyExplorer) for allowing the user to navigate through constituencies using 
arrow keys. It will probably be wise in this case to give ConstituencyModel a QItemSelectionModel
to keep track of which constituency is currently selected. Clicking on a constituency or
navigating to it with the arrow keys should select it. Double-clicking a constituency or 
pressing ENTER on the curretly selected constituency should activate that constituency.

Politicians should probably be displayed as thumbnails. You should have the option to select some thumbnails and
then to press a button to display more details about the selected politicians (the selection model should know which politicians).
This should perhaps shring the ConstituencyWidget and put a Widget displaying the politician details beside it (or just pop up
a new widget).

A constituency needs to have an area data member.

It's probably not ideal but the convention in this projecvt is that connections to a database on 
file shall be named by the file's absolute file path.

Think about whether you want to cache IDs or model indices. Model indices seem most useful 
but they are invalidated far more freuqntly than IDs; still, the best idea feels like caching 
model indices and updating them where necessary - just make sure to keep all these shenanigans in 
the class implementation. 
